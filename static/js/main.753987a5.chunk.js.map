{"version":3,"sources":["components/time.js","components/navbar.js","components/stopwatch.js","components/timer.js","App.js","reportWebVitals.js","index.js"],"names":["Currentime","time","Date","toTimeString","useState","ctime","setCtime","setInterval","slice","Navbar","className","to","Stoptime","timer","setTimer","isActive","setIsActive","isPaused","setIsPaused","countRef","useRef","getSeconds","minutes","Math","floor","getMinutes","getHours","formatTime","onClick","clearInterval","current","disabled","Diffrence","Timer","year","getFullYear","diffrence","timeLeft","days","hours","seconds","setTimeLeft","useEffect","setTimeout","timerComponents","Object","keys","forEach","interval","push","length","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.753987a5.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport '../App.css';\r\n\r\nconst Currentime = () => {\r\n    const time = new Date().toTimeString();\r\n    const [ctime,setCtime] = useState(time);\r\n    const Updatetime = () => {\r\n      let time = new Date().toTimeString();\r\n      setCtime(time);\r\n    };\r\n    setInterval (Updatetime,1000);\r\n      return (\r\n            <h1>{ ctime.slice(0,8) }</h1>\r\n      );\r\n    };\r\nexport default Currentime; ","import React from \"react\";\r\nimport '../App.css';\r\nimport {Link} from \"react-router-dom\";\r\nfunction Navbar(){\r\n      return (\r\n            <div className=\"Nav\">\r\n              <Link\r\n                className=\"App-link1\"\r\n                to=\"/\"\r\n              >\r\n                Current Time\r\n              </Link>\r\n    \r\n              <Link\r\n                className=\"App-link2\"\r\n                to=\"/stopwatch\"\r\n              >\r\n                StopWatch\r\n              </Link>\r\n              <Link\r\n              className=\"App-link3\"\r\n              to=\"/timer\"\r\n            >\r\n              Timer\r\n            </Link>\r\n            </div>\r\n      );\r\n    };\r\nexport default Navbar; ","import React, { useRef, useState } from \"react\";\r\nimport '../App.css';\r\nconst Stoptime = () => {\r\n    const [timer, setTimer] = useState(0);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [isPaused, setIsPaused] = useState(false);\r\n    const countRef = useRef(null)\r\n\r\n    const handleStart = () => {\r\n        setIsActive(true)\r\n        setIsPaused(true)\r\n        countRef.current = setInterval(()=>{\r\n            setTimer((timer) => timer +1)\r\n        },1000)\r\n    }\r\n\r\n    const handlePause = () => {\r\n        clearInterval(countRef.current)\r\n        setIsPaused(false)\r\n    }\r\n    const handleResume = () =>{\r\n        setIsPaused(true)\r\n        countRef.current = setInterval(() => {\r\n          setTimer((timer) => timer + 1)\r\n        }, 1000)\r\n    }\r\n    const handleReset = () =>{\r\n        clearInterval(countRef.current)\r\n        setIsActive(false)\r\n        setIsPaused(false)\r\n        setTimer(0)   \r\n    }\r\n    const formatTime = () => {\r\n        const getSeconds = `0${(timer % 60)}`.slice(-2)\r\n        const minutes = `${Math.floor(timer / 60)}`\r\n        const getMinutes = `0${minutes % 60}`.slice(-2)\r\n        const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\r\n    \r\n        return `${getHours} : ${getMinutes} : ${getSeconds}`\r\n      }\r\n    return(\r\n        <div className=\"stop\">\r\n        <h3>Stopwatch</h3>\r\n        <p>{ formatTime() }</p>\r\n        <div className=\"buttons\">\r\n            {\r\n                !isActive && !isPaused?\r\n                <button onClick={handleStart}>Start</button>\r\n                :(\r\n                    isPaused ? <button onClick={handlePause}>Pause</button>:\r\n                    <button onClick={handleResume}>Resume</button>\r\n                )\r\n                \r\n            }\r\n            <button onClick={handleReset} disabled={!isActive}>Reset</button>\r\n\r\n        </div>\r\n    </div>\r\n\r\n    )\r\n};\r\n\r\nexport default Stoptime;\r\n","import React, { useEffect, useState } from \"react\"\r\nimport '../App.css';\r\nconst Diffrence = () => {\r\n    const Timer = () => {\r\n        let year = new Date().getFullYear();\r\n        let diffrence = +new Date(`10/01/${year}`) - +new Date();\r\n    \r\n        let timeLeft = {};\r\n        if(diffrence > 0){\r\n            timeLeft = {\r\n                days : Math.floor(diffrence/(1000*60*60*24)),\r\n                hours: Math.floor((diffrence/(1000*60*60)%24)),\r\n                minutes:Math.floor((diffrence/(1000*60) % 60)),\r\n                seconds:Math.floor((diffrence/1000) % 60),\r\n            };\r\n        }\r\n        return timeLeft;\r\n    };\r\n    const [timeLeft, setTimeLeft] = useState(Timer());\r\n    const [year] = useState(new Date().getFullYear());\r\n\r\n    useEffect (() => {\r\n        setTimeout(()=>{\r\n            setTimeLeft(Timer());\r\n        },1000);\r\n    });\r\n\r\n    const timerComponents = [];\r\n    Object.keys(timeLeft).forEach((interval) => {\r\n        if (!timeLeft[interval]) {\r\n          return;\r\n        }\r\n    \r\n        timerComponents.push(\r\n          <span>\r\n            {timeLeft[interval]} {interval}{\" \"}\r\n          </span>\r\n        );\r\n      });\r\n\r\n      return(\r\n        <div className=\"Timer\">\r\n        <h1>React js new Session {year} Countdown</h1>\r\n        {timerComponents.length ? timerComponents:<span>time</span>}\r\n       </div>\r\n      )\r\n\r\n\r\n    \r\n}\r\n\r\nexport default Diffrence;\r\n","import React, { useState } from \"react\";\nimport './App.css';\nimport Currentime from \"./components/time\";\nimport Navbar from \"./components/navbar\";\nimport Stoptime from \"./components/stopwatch\";\nimport Diffrence from \"./components/timer\";\nimport {BrowserRouter as Router, Route, Switch}  from \"react-router-dom\";\n\nfunction App(){\n  return(\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Router>\n          <Switch>\n            <Route exact path = \"/\"  component={ Currentime } />\n            <Route exact path=\"/stopwatch\" component={ Stoptime } />\n            <Route exact path=\"/timer\" component={ Diffrence } />\n          </Switch>\n          <Navbar />\n        </Router>\n      </header>\n    </div>\n\n\n  )\n\n}\n\n \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}